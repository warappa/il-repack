<Project>

  <ItemGroup>
    <ProjectReference Include="..\..\..\ILRepack\ILRepack.csproj" ReferenceOutputAssembly="false" OutputItemType="ILRepackExe" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Required, so that a change in ILRepack (ProjectReference) is actually forcing a build in the project referencing this file.
    If no updates are found it will be handled as up-to-date. This check is actually still fast. -->
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
  </PropertyGroup>

  <Target Name="GatherInputs">
    <ItemGroup>
      <ILRepackInput Include="$(TargetDir)\*.dll" />
      <ILRepackInput Remove="$(TargetDir)$(TargetFileName)" />
    </ItemGroup>
  </Target>

  <Target Name="Repack"
          DependsOnTargets="GatherInputs"
          AfterTargets="Build"
          Inputs="@(ILRepackInput);@(ILRepackExe);$(TargetPath);$(MSBuildThisFileFullPath)"
          Outputs="$(TargetDir)\merged\$(TargetFileName)">
    <MakeDir Directories="$(TargetDir)merged" />
    
    <PropertyGroup>
      <ILRepackVerboseArgument Condition="$(ILRepackVerbose) == true"> /verbose</ILRepackVerboseArgument>
      <ILRepackExePath>%(ILRepackExe.Identity)</ILRepackExePath>
    </PropertyGroup>
    
    <Exec Command="&quot;$(ILRepackExePath)&quot; $(ILRepackExtraArgs)$(ILRepackVerboseArgument) /log /out:$(TargetDir)merged\$(TargetFileName) $(TargetFileName) @(ILRepackInput->'%(Filename)%(Extension)', ' ')"
        WorkingDirectory="$(TargetDir)"
        ConsoleToMSBuild="True" />
    <Copy Condition="Exists('$(ProjectRuntimeConfigFilePath)')"
          SourceFiles="$(ProjectRuntimeConfigFilePath)"
          DestinationFiles="$(TargetDir)\merged\$(ProjectRuntimeConfigFileName)"
          SkipUnchangedFiles="True" />
  </Target>

</Project>